#!/usr/bin/python
#
# Copyright (c) 2015, Los Alamos National Security, LLC
# All rights reserved.
# 
# Copyright 2015.  Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use, reproduce,
# and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL
# SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
# FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative
# works, such modified software should be clearly marked, so as not to confuse it
# with the version available from LANL.
#  
# Additionally, redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of Los Alamos National Security, LLC, Los Alamos National
# Laboratory, LANL, the U.S. Government, nor the names of its contributors may be
# used to endorse or promote products derived from this software without specific
# prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# -----
# NOTE:
# -----
# MarFS is released under the BSD license.
# 
# MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier:
# LA-CC-15-039.
# 
# MarFS uses libaws4c for Amazon S3 object communication. The original version
# is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
# LANL added functionality to the original work. The original work plus
# LANL contributions is found at https://github.com/jti-lanl/aws4c.
# 
# GNU licenses can be found at http://www.gnu.org/licenses/.

import os
import subprocess
import re
import errno
import sys

# The number of bytes to be read/written per iteration
BYTES = 8192
# The environment-var which stores the location of the MarFS config reader executable
MARFS_CONF_ENV='MARFSCONFIGEX'
# The name of the config reader executable (used for PATH lookup if the above env-var is not set)
MARFS_CONF_NAME='marfs_config'


# locate the 'marfs_config' executable
try:
   MARFS_CONFIG=os.environ[MARFS_CONF_ENV]
except KeyError:
   # if the environment var is not set, assume the executable is in the path
   MARFS_CONFIG=MARFS_CONF_NAME

try:
   # launch the marfs configuration parser
   config = subprocess.Popen([ MARFS_CONFIG, "-t", "mnt_top" ],
                             shell=False,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE )
except OSError as err:
   # if the config reader didn't launch, print the error and terminate
   print >> sys.stderr, "pipetool_remote: failed to execute MarFS configuration parser on the batch-FTA: {0}".format( err )
   exit( err.errno )

out, err = config.communicate()

# if the parser hit an error, print it and terminate
if ( err != "" ):
   perr = err.split( " ", 1 )
   sys.stderr.write( "pipetool_remote: error reading MarFS configuration: "+perr[-1] )
   exit( errno.EIO )

# Verify number of arguments
if ( len(sys.argv) != 3 ):
   print >> sys.stderr, "pipetool_remote: usage: pipetool_remote {store, retrieve} PATHNAME"
   exit( errno.EINVAL )

# construct a regex based upon the mnt_top paths in the MarFS config
regstr = "^"
lines = out.split( "\n" )
for line in lines:
   if ( line == "" ):
      continue
   if ( not line.endswith( "/" ) ):
      line+="/" #mnt_top is a directory
   if ( regstr != "^" ):
      regstr += "|"
   regstr += "("+line+".*)"
regstr += "$"

regex = re.compile( regstr  )
path = os.path.realpath( sys.argv[2] )

# Verify that this access is under the MarFS 'mnt_top'
if ( not regex.match(path) ):
   print >> sys.stderr, "pipetool_remote: operation not permitted: accessing non-MarFS paths is forbidden"
   exit( errno.EPERM )

store = False  #specifies the operation to perform
data = ""      #data read from stdin

# Parse args
if ( sys.argv[1] == "store" ):
   store = True
elif ( sys.argv[1] == "detect" ):
   data = sys.stdin.read( BYTES )
   if ( data != "" ):
      if ( os.path.isfile( path ) ):
         print >> sys.stderr, "pipetool_remote: The specified file exists and the desired operation is uncertain.\n          Use the \"store\" option to overwrite the existing file or the \"retrieve\" option to read it."
         exit( errno.EEXIST )
      else:
         store = True
elif ( sys.argv[1] != "retrieve" ):
   print >> sys.stderr, "Usage: pipetool_remote {store, retrieve} PATHNAME"
   exit( errno.EINVAL )

if ( store ):
   # Open the target location for writing
   try:
      target = open( path, 'w' )
      # Read form stdin and write to the target file location
      if ( data == "" ):
         data = sys.stdin.read( BYTES )
      while ( data != "" ):
         target.write( data )
         data = sys.stdin.read( BYTES )
   except IOError as err:
      print >> sys.stderr, "pipetool_remote: error writing to file: {0}".format( err )
      exit( err.errno )
else:
   # Open the target location for reading
   try:
      target = open( path, 'r' )
      # Read form stdin and write to the target file location
      data = target.read( BYTES )
      while ( data != "" ):
         sys.stdout.write( data )
         data = target.read( BYTES )
   except IOError as err:
      print >> sys.stderr, "pipetool_remote: error reading from file: {0}".format( err )
      exit( err.errno )

# Cleanup
target.close()


