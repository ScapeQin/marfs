#!/usr/bin/python
#
# Copyright (c) 2015, Los Alamos National Security, LLC
# All rights reserved.
# 
# Copyright 2015.  Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use, reproduce,
# and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL
# SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
# FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative
# works, such modified software should be clearly marked, so as not to confuse it
# with the version available from LANL.
#  
# Additionally, redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of Los Alamos National Security, LLC, Los Alamos National
# Laboratory, LANL, the U.S. Government, nor the names of its contributors may be
# used to endorse or promote products derived from this software without specific
# prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# -----
# NOTE:
# -----
# MarFS is released under the BSD license.
# 
# MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier:
# LA-CC-15-039.
# 
# MarFS uses libaws4c for Amazon S3 object communication. The original version
# is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
# LANL added functionality to the original work. The original work plus
# LANL contributions is found at https://github.com/jti-lanl/aws4c.
# 
# GNU licenses can be found at http://www.gnu.org/licenses/.

import os
import subprocess
import re
import errno
import argparse
import sys
import random

hstr = os.environ['BATCH_FTAS']

# Hostnames (or IPs) of batch-ftas where the backend pipetool can be found
HOSTS = hstr.split(':')
# Complete path to the backend pipetool on the batch-fta
LOC = os.environ['PIPETOOL_REMOTE']
# Number of bytes to be read/written per iteration
BYTES = 8192
fail=False

host=random.choice(HOSTS)

# Parse cmd line inputs
parser = argparse.ArgumentParser( description="This program provides piping functionality into and out of filesystems via a second program (pipetool_remote) located on a batch FTA.  It is intended to provide piping of reasonably small files into marfs, but can be used with any FUSE filesystem.\n\nNote: when neither '-s' nor '-r' are specified, the program will attempt to determine the appropriate action.  If the file exists, it will be retrieved.  If not, and if input has been supplied, the input will be stored.", formatter_class=argparse.RawTextHelpFormatter )
parser.add_argument( "-v", "--verbose",  help="increase output verbosity", action="store_true" )
group = parser.add_mutually_exclusive_group()
group.add_argument( "-s", "--store", help="forces a write/store to the specified location, overwriting any destination file already present.", action="store_true" )
group.add_argument( "-r", "--retrieve", help="forces a read/retrieve from the specified location", action="store_true" )
parser.add_argument( "PATHNAME", help="complete path to the desired input/output location" )
args = parser.parse_args()

# Get the absolute path to the given file
path = os.path.realpath( args.PATHNAME )

if ( args.verbose ):
   print >> sys.stderr, "pipetool: using batch-FTA \""+host+"\""

# Start pipetool_remote on host with the appropriate arg
if ( args.store):
   if ( args.verbose ):
      print >> sys.stderr, "pipetool: opening connection for write..."
   ssh = subprocess.Popen([ "ssh", host, LOC+" store "+path ],
                          shell=False,
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
elif ( args.retrieve ):
   if ( args.verbose ):
      print >> sys.stderr, "pipetool: opening connection for read..."
   ssh = subprocess.Popen([ "ssh", host, LOC+" retrieve "+path ],
                          shell=False,
                          stdin=subprocess.PIPE,
                          stderr=subprocess.PIPE)
else:
   if ( args.verbose ):
      print >> sys.stderr, "pipetool: opening connection for an undetermined operation..."
   ssh = subprocess.Popen([ "ssh", host, LOC+" detect "+path ],
                          shell=False,
                          stdin=subprocess.PIPE,
                          stderr=subprocess.PIPE)

if ( args.verbose ):
   print >> sys.stderr, "pipetool: connection opened"

# Attempt to store, writing to stdin of pipetool_remote
if( args.store  or  not ( sys.stdin.isatty() or args.retrieve ) ):
   data = sys.stdin.read(BYTES)

   if ( args.verbose ):
      print >> sys.stderr, "pipetool: writing to pipe..."
   
   while ( data != "" ):
      try:
         ssh.stdin.write( data )
      except IOError as e:
         if ( e.errno != errno.EPIPE ): #if not a broken pipe, notify immediately
            print "pipetool: ERROR: {0}".format( e )
            exit( e.errno )
         fail=True #if a broken pipe, just note and move on
         break
      data = sys.stdin.read( BYTES )

   if ( args.verbose ):
      print >> sys.stderr, "pipetool: writes completed"

if ( args.verbose ):
   print >> sys.stderr, "pipetool: checking output from remote host..."
out, err = ssh.communicate()

# Report errors
if ( err != "" ):
   split = err.split( " ", 1 )
   if ( "pipetool_remote:" == split[0] ):
      sys.stderr.write( "pipetool: "+split[1] )
   else:
      sys.stderr.write( err )
   sys.stderr.flush()
elif ( fail ): #if pipetool_remote never indicated a problem, notify user of broken pipe
   print >> sys.stderr, "pipetool: ERROR: connection to remote host closed unexpectedly"
   exit( errno.EPIPE )

# Pass any appropriate errno back to the user
if ( args.verbose ):
   print >> sys.stderr, "pipetool: terminating..."
exit( ssh.returncode )

