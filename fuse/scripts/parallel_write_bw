#!/bin/bash

# Fuse isn't intended to support parallel writes for a given writer, but
# many writers may write at the same time.

# Q: Can they get a better aggregate BW than an individual task?

# A: Yes.  I get ~200 MB/s for a single writer, and this has gotten
#    as high as ~600 MB/s.

# ISSUES:
#
# (1) marfs truncate takes considerable time, so we delete all the files
#     ahead of time, to avoid adding the cost of truncate to the
#     timeing-section.
#
# (2) If repo.chunksize is smaller than the per-task write-size, then the
#     writes will include the overhead of closing one object and opening a
#     new one, when fuse is creating Multi.  (The per-task write includes
#     ~2k of recovery-info, per object.)



# constants
M=$((1024 * 1024))
G=$((1024 * 1024 * 1024))

# N_TASKS=8
N_TASKS=4

# BLK_SIZE=$((1 * G))
# BLK_SIZE=$((512 * M))
# BLK_SIZE=$(( (1 * G) - 1336 ))
BLK_SIZE=$(( (512 * M) - 1336 ))

COUNT=1


# total MB moved by all tasks
MB_TOT=$(( (N_TASKS * BLK_SIZE * COUNT) / M ))

MB_EACH=$(( (BLK_SIZE * COUNT) / M ))


# Construct the filename for a given integer
function filename() {
    echo /marfs/jti/parallel.`printf "%02d" $1`
}


# testing
function obj_name() {
    echo http://10.135.0.21:81/sproxyd_jti/jti/`filename $1`
}

# launch parallel jobs in the background
# wait for all jobs to complete, before returning
function do_tasks() {
    for i in `seq 1 $N_TASKS`; do
        FILE=`filename $i`
        dd if=/dev/zero of=$FILE bs=$BLK_SIZE count=$COUNT &
    done
    echo "waiting"
    wait
}


# delete old versions of all files, so we don't measure the cost of
# truncating an existing file
for i in `seq 1 $N_TASKS`; do
    FILE=`filename $i`
    echo "deleting $FILE"
    rm -f $FILE
done


# measure elapsed times for the parallel writes to all complete.
# NOTE: 'time' is a real POS.
echo "$N_TASKS parallel writers, writing $MB_EACH MB each (through fuse-mount)"
OUTPUT=`(time do_tasks) 2>&1`
echo -e "output:\n$OUTPUT"

TIME=`echo "$OUTPUT" | awk '/real/ {print $2}' `
echo "timing: $TIME"



# extract the number of seconds
SEC=`echo $TIME \
    | sed -re 's/^([0-9]+)m([0-9.]+)s/(60 * \1) + \2/' \
    | bc -q`
echo "total sec: $SEC"


# compute bandwidth
BW=`echo "$MB_TOT/$SEC" | bc -q`

echo "performance: $MB_TOT MB, $SEC sec = $BW MB/s"
