#!/bin/bash -e

# fuse doesn't create packed files, but it has to be able to read them.
# This script creates a dummy packed file, so we can test fuse-read on it.
#
# We're trying to match all the real properties that Packed files will
# eventually have.  In this script we just concatenate the contents of the
# member objects, including their tail-end recovery-info (plus 8 more
# bytes).  We also want object-IDs to be reliably unique, so we want a real
# inode in their object-IDs, which we get from the first member.


# including recovery-info.  Just a nice, round number in hex
OBJ_SIZE=2048

# This is the current value for "sizeof(RecoveryInfo)" +8
#
# RECOVERY=1080
RECOVERY=1336

# Just so that FILE_SIZE + RECOVERY = OBJ_SIZE
FILE_SIZE=$(( OBJ_SIZE - RECOVERY ))

# Create this many packed files.  They will all be stored in the same
# object.  We ignore anything in the config file about marfs chunksize.
# Please consider picking a number that won't put the total size of the
# packed object (including recovery-info) larger than the marfs
# "chunk_size" for this repo.  There might be a good reason someone picked
# that chanksize.
N_OBJECTS=8
N_OBJECTS_MINUS_ONE=7


# uncomment if you want verbose CURL output
# VERBOSE=-v
VERBOSE=-s

function usage() {
    echo "Usage: $0 <repo>"
    echo
    echo " where <repo> is 'scality' or 'emc'"
    echo
}


if [[ $# != 1 ]]; then
    usage
    exit 1

# For now we're hardwiring these variables to match the hardwired config in
# the fuse-mount.  Eventually, this should read and parse the actual
# config-file.
elif [[ $1 == "scality" ]]; then

#    MARFS="/marfs/jti"
#    GPFS="/gpfs/marfs-gpfs/fuse/test00/mdfs"
#    HOST="http://10.135.0.21:81"

    MARFS="/marfs/atorrez"
    GPFS="/gpfs/marfs-gpfs/project_a/mdfs"
    HOST="http://10.135.0.22:81"

    function get() { URL=$1;          curl $VERBOSE $URL; }
    function del() { URL=$1;          curl $VERBOSE -X DELETE $URL; }
    function put() { FILE=$1; URL=$2; curl $VERBOSE -T $FILE $URL; }

elif [[ $1 == "emc" ]]; then
    MARFS="/marfs/s3"
    GPFS="/gpfs/fs2/fuse_s3/mdfs"
    HOST="http://10.140.0.15:9020"

    function get() { URL=$1;          s3curl.pl --id=jti             -- $VERBOSE $URL; }
    function del() { URL=$1;          s3curl.pl --id=jti             -- $VERBOSE -X DELETE $URL; }
    function put() { FILE=$1; URL=$2; s3curl.pl --id=jti --put $FILE -- $VERBOSE $URL; }

else
    usage
    exit 1

fi






# Give us the MarFS path (i.e. path under '/marfs'), and we'll read the
# xattr and return the corresponding object-ID.
#
# ---------------------------------------------------------------------------
# NOTE: There appears to be a small delay, before GPFS xattrs written by
# one process will be seen by other processes, unless we sync.
# ---------------------------------------------------------------------------


function obj_name() {
    FILE=$1
    sync
    OBJ=`attr -q -g marfs_objid $GPFS/$FILE`
    echo "$OBJ"
}


function file_name() {
    echo "p$1"
}


# --- delete any old versions, so marfs is thrown off by failed
#     xattr-modifications done by buggy earlier versions of this script

for i in `seq 1 $N_OBJECTS`; do
    F=`file_name $i`
    echo "deleting $MARFS/$F"
    rm -f $MARFS/$F
done


# --- create several small Marfs files to be packed

echo "creating $N_OBJECTS small objects with recognizable contents"
#for i in `seq 1 $N_OBJECTS`; do
for i in `seq 1 $N_OBJECTS_MINUS_ONE`; do
    F=`file_name $i`
    FILL=$(( i % 10 ))
    echo -e "\tfile: $MARFS/$F"
    dd if=/dev/zero bs=$FILE_SIZE count=1 | tr '\0' "$FILL" > $MARFS/$F
done


# ---------------------------------------------------------------------------
# NOTE: There appears to be a small delay, before GPFS xattrs written by
# fuse will be seen by other processes, unless we sync.
# ---------------------------------------------------------------------------

### sleep 1
### sync $GPFS/p1
sync
echo



# --- extract "marfs_objid" xattr, and adapt to become
#     the object-ID for our synthetic packed object

FNAME=`file_name 1`

# In order to assure we're using an objid that is consistent with the
# running fuse client (e.g. having correct chunk-size), we'll just adapt
# the object-id from one of the small files that are being packed.  This
# will have incorrect ctime, etc, but that won't matter.
OBJID=`obj_name $FNAME`
echo "$FNAME           OBJID: $OBJID"

# Change the encoded object-type from "Fuse" to "Packed"
# NOTE: I think this is ignored in favor of info in the Post xattr.
OBJID=`echo $OBJID | sed -E 's/F___/P___/'`
echo "changed type OBJID: $OBJID"
echo


# --- extract "marfs_post" xattr, and adapt to become the
#     POST xattr for the member-files.  (This is the xattr
#     that fuse uses to determine the type of any file.)


# To get a consistent value for Post xattr, we'll borrow from one of the
# to-be-packed files, and tweak it.
echo "POST=attr -qg marfs_post $GPFS/$FNAME"
POST=`attr -qg marfs_post $GPFS/$FNAME`
echo "$FNAME           POST: $POST"

# Change the encoded object-type from "Uni" to "Packed"
POST=`echo $POST | sed -E 's/\/U\//\/P\//'`
echo "changed type POST: $POST"

# Change the number of objects (in the packed object) to $N_OBJECTS
POST=`echo $POST | sed -re 's/(\/objs)\.([^\/]*)(\/)/\1.##\3/'`
POST=`echo $POST | sed -re "s/##/$N_OBJECTS/"`
echo "changed objs POST: $POST"
echo




# --- the packed object just has the concatenation of the contents of the
#     original objects.  Delete the originals.

echo "gathering contents of two objects into local file tmp.packed"
rm -f tmp.packed
for i in `seq 1 $N_OBJECTS`; do
    F=`file_name $i`
    OBJ=`obj_name $F`

    echo
    echo "gathering $HOST/$OBJ"
    get $HOST/$OBJ >> tmp.packed

    echo "deleting the original"
    del $HOST/$OBJ
done
echo


echo "writing local file back out as a single object"
echo "writing $HOST/$OBJID"
put tmp.packed $HOST/$OBJID
echo


# --- update the xattrs of the originals, since they are now packed


OFFSET=0
for i in `seq 1 $N_OBJECTS`; do
    F=`file_name $i`
    echo "updating xattrs for $GPFS/$F"

    # Change the object-offset
    POST=`echo $POST | sed -E "s/off.([0-9]+)\//off.$OFFSET\//"`
    echo "POST (2): $POST"

    attr -s marfs_objid -V $OBJID $GPFS/$F
    attr -s marfs_post  -V $POST  $GPFS/$F

    SIZE=`stat -c "%s" $GPFS/$F`

    OFFSET=$(( OFFSET + SIZE + RECOVERY ))
    echo
done



rm -f tmp.packed
echo "done."
