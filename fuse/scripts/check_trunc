#!/bin/bash -e

# Test detailed workings of marfs truncate.
# (1) Write to a new file
# (2) Write different contents to the same file
# (3) validate:
#     -- trash objid different from mdfs objid
#     -- contents of trash objid match original contents
#     -- contents of mdfs  objid match different contents

FNAME=trunc_test_`date +"%Y%m%d_%H%M%S"`

MDFS=/gpfs/marfs-gpfs/fuse/test00/mdfs/$FNAME

S3CURL="~/projects/ecs_hobo/tools/s3-curl/s3curl.pl --id jti"
CURL="curl"

EMC=" -s http://10.140.0.15:9020"
SCAL="-s http://10.135.0.21:81"

echo "file = $MDFS"


# -- write original file (does not exist yet)
#
# NOTE: using 1025 because that +1080 recovery info, causes a Multi, if the
#     Repo has chunk-size 2k.
echo
echo "writing '0' to original object"
dd if=/dev/zero bs=1025 count=1 | tr '\0' '0' > /marfs/jti/$FNAME

INODE=`ls -i $MDFS | awk '{print $1}' | xargs -n 1 printf "%010d"`
echo "orig inode = $INODE"

# GPFS might or might not realize that we just finished writing to it
sync
sleep 1

OBJID0=`attr -qg marfs_objid $MDFS`
echo "orig objid = $OBJID0"
echo


# -- overwrite file (moves original to the trash)
echo "overwriting original object with '1'"
dd if=/dev/zero bs=1025 count=1 | tr '\0' '1' > /marfs/jti/$FNAME

# GPFS might or might not realize that we just finished writing to it
sync
sleep 1

OBJID1=`attr -qg marfs_objid $MDFS`

echo "new objid = $OBJID1"
echo

# --- find trash file
echo "finding trash-file"
TRASH=`ls /gpfs/marfs-gpfs/fuse/test00/trash/$FNAME.trash_$INODE_* \
    | egrep -v '.path$' | sort | tail -n 1`

echo "trash = $TRASH"

OBJIDx=`attr -qg marfs_objid $TRASH`

echo "trash objid = $OBJIDx"
echo




# --- validate ...
echo "validating ..."

ERR=0


# (a) trash objid should match original objid

if [ "$OBJIDx" == "$OBJID0" ]; then
    echo "--- OK:  trash objid matches original objid"
else
    ERR=1
    echo "--- ERR: trash objid does not match original objid"
fi


# (b) new mdfs objid should not match original objid

if [ "$OBJID1" == "$OBJIDx" ]; then
    ERR=1
    echo "--- ERR: new objid matches original objid"
else
    echo "--- OK:  new objid does not match original objid"
fi
echo
echo
echo
echo

# (c) new obj contents should not match trash obj contents

echo "fetching new obj contents"
echo "$CURL $SCAL/$OBJID1 > foo.mdfs"
eval "$CURL $SCAL/$OBJID1 > foo.mdfs"
echo

echo "fetching trash obj contents"
echo "$CURL $SCAL/$OBJIDx > foo.trash"
eval "$CURL $SCAL/$OBJIDx > foo.trash"
echo

echo "new obj contents:"
hexdump -C foo.mdfs

echo
echo "trash obj contents:"
hexdump -C foo.trash

echo
if [[ -z `diff foo.mdfs foo.trash` ]]; then
    ERR=1
    echo "--- ERR: new object contents same as trash contents"
else
    echo "--- OK:  new object contents differ from trash contents"
fi
echo
echo
echo
echo



# (d) metadata-file contents should (in this case) be the same as trash contents

echo "new MD-file contents:"
hexdump -C $MDFS
echo

echo "trash-file contents:"
hexdump -C $TRASH
echo


if [[ -n `diff $MDFS $TRASH` ]]; then
    ERR=1
    echo "--- ERR: new MD-file contents different from trash-file contents"
else
    echo "--- OK:  new MD-file contents same as trash-file contents"
fi
echo
echo
echo
echo



# draw conclusions ...

if (( $ERR )); then
    echo "--- FAIL"
else
    echo "--- PASS"
fi
echo
echo


# --- clean-up

# echo "deleting new obj"
# echo "$CURL -X DELETE $SCAL/$OBJID1"
# eval "$CURL -X DELETE $SCAL/$OBJID1"
# echo
# 
# echo "deleting trash obj"
# echo "$CURL -X DELETE $SCAL/$OBJIDx"
# eval "$CURL -X DELETE $SCAL/$OBJIDx"
# echo
# 
# echo "deleting mdfs-file"
# rm $MDFS
# echo
# 
# echo "deleting trash-file"
# rm $TRASH
# echo

