#!/bin/bash -e

# fuse doesn't create packed files, but it has to be able to read them.
# This script creates a dummy packed file, so we can test fuse-read on it.
#
# We're trying to match all the real properties that Packed files will
# eventually have.  For example, I'm guessing that we will just concatenate
# the contents of the member objects, including their tail-end
# recovery-info (plus 8 more bytes).  We also want object-IDs to be
# reliably unique, so we want a real inode in their object-IDs, which we
# get from the first member.




# This is the current value for "sizeof(RecoveryInfo)" +8
RECOVERY=1080

# uncomment if you want verbose CURL output
# VERBOSE=-v
VERBOSE=-s

function usage() {
    echo "Usage: $0 <repo>"
    echo
    echo " where <repo> is 'scality' or 'emc'"
    echo
}


if [[ $# != 1 ]]; then
    usage
    exit 1

# For now we're hardwiring these variables to match the hardwired config in
# the fuse-mount.  Eventually, this should read and parse the actual
# config-file.
elif [[ $1 == "scality" ]]; then
    MOUNT="/marfs/atorrez"
    GPFS="/gpfs/marfs-gpfs/project_a"
    HOST="http://10.135.0.22:81"

    function get() { URL=$1;          curl $VERBOSE $URL; }
    function del() { URL=$1;          curl $VERBOSE -X DELETE $URL; }
    function put() { FILE=$1; URL=$2; curl $VERBOSE -T $FILE $URL; }

elif [[ $1 == "emc" ]]; then
    MOUNT="/marfs/s3"
    GPFS="/gpfs/fs2/fuse_s3/mdfs"
    HOST="http://10.140.0.15:9020"

    function get() { URL=$1;          s3curl.pl --id=jti             -- $VERBOSE $URL; }
    function del() { URL=$1;          s3curl.pl --id=jti             -- $VERBOSE -X DELETE $URL; }
    function put() { FILE=$1; URL=$2; s3curl.pl --id=jti --put $FILE -- $VERBOSE $URL; }

else
    usage
    exit 1

fi






# Give us the MarFS path (i.e. path under '/marfs'), and we'll read the
# xattr and return the corresponding object-ID.
#
# ---------------------------------------------------------------------------
# NOTE: There appears to be a small delay, before GPFS xattrs written by
# one process will be seen by other processes, unless we sync.
# ---------------------------------------------------------------------------


function obj_name() {
    FILE=$1
    sync
    OBJ=`attr -q -g marfs_objid $GPFS/$FILE`
    echo "$OBJ"
}




# --- delete any old versions, so marfs is thrown off by failed
#     xattr-modifications done by buggy earlier versions of this script

rm -f $MOUNT/p1
rm -f $MOUNT/p2



# --- create several small Marfs files to be packed

echo "creating two objects with recognizable contents"
dd if=/dev/zero bs=968 count=1 | tr '\0' '1' > $MOUNT/p1
dd if=/dev/zero bs=968 count=1 | tr '\0' '2' > $MOUNT/p2

# dd if=/dev/zero bs=968 count=1 conv=fsync | tr '\0' '1' > $MOUNT/p1
# dd if=/dev/zero bs=968 count=1 conv=fsync | tr '\0' '2' > $MOUNT/p2


# ---------------------------------------------------------------------------
# NOTE: There appears to be a small delay, before GPFS xattrs written by
# fuse will be seen by other processes, unless we sync.
# ---------------------------------------------------------------------------

### sleep 1
### sync $GPFS/p1
sync
echo



# --- extract "marfs_objid" xattr, and adapt to become
#     the object-ID for our synthetic packed object


# In order to assure we're using an objid that is consistent with the
# running fuse client (e.g. having correct chunk-size), we'll just adapt
# the object-id from one of the small files that are being packed.  This
# will have incorrect ctime, etc, but that won't matter.
OBJID=`obj_name p1`
echo "OBJID:           $OBJID"

# Change the encoded object-type from "Fuse" to "Packed"
# NOTE: I think this is ignored in favor of info in the Post xattr.
OBJID=`echo $OBJID | sed -E 's/F___/P___/'`
echo "OBJID (tweaked): $OBJID"



# --- extract "marfs_post" xattr, and adapt to become the
#     POST xattr for the member-files.  (This is the xattr
#     that fuse uses to determine the type of any file.)


# To get a consistent value for Post xattr, we'll borrow from one of the
# to-be-packed files, and tweak it.
echo "POST=attr -qg marfs_post $GPFS/p1"
POST=`attr -qg marfs_post $GPFS/p1`
echo "POST:           $POST"

# Change the encoded object-type from "Uni" to "Packed"
POST=`echo $POST | sed -E 's/\/U\//\/P\//'`
echo "POST (tweaked): $POST"
echo




# --- the packed object just has the concatenattion of the contents of the
#     two original objects.  Delete the originals.

echo "gathering contents of two objects into local file tmp.packed"
rm -f tmp.packed
for F in p1 p2; do
    OBJ=`obj_name $F`

    echo
    echo "gathering $HOST/$OBJ"
    get $HOST/$OBJ >> tmp.packed

    echo "deleting the original"
    del $HOST/$OBJ
done
echo


echo "writing local file back out as a single object"
echo "writing $HOST/$OBJID"
put tmp.packed $HOST/$OBJID
echo


# --- update the xattrs of the originals, since they are now packed


OFFSET=0
for F in p1 p2; do
    echo "updating xattrs for $GPFS/$F"

    # Change the object-offset
    POST=`echo $POST | sed -E "s/off.([0-9]+)\//off.$OFFSET\//"`
    echo "POST (2): $POST"

    attr -s marfs_objid -V $OBJID $GPFS/$F
    attr -s marfs_post  -V $POST  $GPFS/$F

    SIZE=`stat -c "%s" $GPFS/$F`

    OFFSET=$(( OFFSET + SIZE + RECOVERY ))
    echo
done


rm -f tmp.packed
echo "done."
