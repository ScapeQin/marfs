<config>

<name>config-name</name>

# There's some confusion regarding our use of "version" in the config-file.
# We now realize this probably shouldn't be presumed to be the same as the
# version that goes into object-IDs.  The latter version indicates how to
# parse xattrs, and may also concern the format of chunk-info in MD files,
# or the recovery-info in objects.  Those things are all now dictated by
# #defines MARFS_CONFIG_MAJOR/MINOR, which identify the version of the
# SOFTWARE, rather than the config.

# However, there is also the config-reader, which should be able to know
# whether the config file "version" is something it understands.  So,
# that's what the version in the config-file means.

# Changes in minor version are presumed to be backward-compatible, within
# the same major version.  In other words, if you add fields here, you
# could update the minor version, and your config-reader should be able to
# provide defaults for earlier minor versions which did not have that
# field.  However, that doesn't mean older minor-version parsers will
# correctly handle newer minor-versions.  So, parsers should assure that
# the config file they are reading is not newer than they are.

# The version number in the blueprint is not used anywhere, but it is
# recommended that you update it when you make changes, so that we can tell
# which config files might use updating.

<version>0.2</version>

<mnt_top>mount-point-under-which-all-namespaces-will-be-placed (e.g. /marfs)</mnt_top>



<repo : type=__list>
  <name>repo-name (referred to by namespaces)</name>
  <host>host-name-plus-port, (can be ip-addr or hostname, e.g. 10.135.0.22:81)</host>
  <host_offset>unused unless host_count .gt. 1</host_offset>
  <host_count>if >1, sprintf(..., host, host_offset + (rand() % host_count))</host_count>
  <update_in_place>YES/NO</update_in_place>
  <ssl>YES/NO</ssl>
  <access_method>one-of: DIRECT,SEMI_DIRECT,CDMI,SPROXYD,S3,S3_SCALITY,S3_EMC</access_method>
  <chunk_size>max-number-of-bytes-in-a-UNI-object</chunk_size>
  <max_request_size>largest GET request bytes, or zero (default) for unconstrained</max_request_size>
  <pack_size>max-bytes-of-object-into-which-files-are-packed-zero-means-no-packing</pack_size>
  <security_method>one-of: S3_AWS_USER,S3_AWS_MASTER,S3_PER_OBJ,NONE</security_method>
  <sec_type>one-of: NONE</sec_type>
  <comp_type>one-of: NONE</comp_type>
  <correct_type>one-of: NONE</correct_type>
  <latency>milliseconds-for-request-timeout</latency>
</repo>

<namespace : type=__list>
  <name>namespace-name</name>
  <mnt_path>path-under-mnt-top (single leading slash, e.g. /atorrez)</mnt_path>
  <bperms>subset-of: RM,WM,RD,WD,TD,UD (with commas)</bperms>
  <iperms>subset-of: RM,WM,RD,WD,TD,UD (with commas)</iperms>
  <iwrite_repo_name>repo-name used for all fuse accesses</iwrite_repo_name>
  <range : type=__list>
    <min_size>min-size, for files written to this repo</min_size>
    <max_size>max-size, for files written to this repo (use -1 for unlimited)</max_size>
    <repo_name>repo-name for this range</repo_name>
  </range>
  <md_path>dir where MD for this namespace is stored (under some per-NS GPFS file-set)</md_path>
  <trash_md_path>dir where trash for NS is stored (GPFS fileset, diff from md_path)</trash_md_path>
  <fsinfo_path>file trunced by quota scripts, used to limit new writes</fsinfo_path>
  <quota_space>bytes allowed for NS storage</quota_space>
  <quota_names>inodes allowed for NS storage</quota_names>
  <ns_shardp>path-to-shard-metadata-file-systems</ns_shardp>
  <ns_shardp_num>integer-max-shard-metadata-file-systems</ns_shardp_num>
</namespace>

</config>
